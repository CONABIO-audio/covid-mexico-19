# Generated by Django 3.0.5 on 2020-04-14 23:37

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Entidad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agregado_el', models.DateTimeField(auto_now_add=True)),
                ('clave', models.IntegerField(unique=True)),
                ('nombre', models.CharField(max_length=80)),
                ('geometria', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Origen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agregado_el', models.DateTimeField(auto_now_add=True)),
                ('clave', models.IntegerField(unique=True)),
                ('valor', models.CharField(max_length=63)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Pais',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agregado_el', models.DateTimeField(auto_now_add=True)),
                ('nombre', models.CharField(max_length=80)),
                ('codigo', models.CharField(max_length=3)),
                ('region', models.CharField(max_length=31)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resultado',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agregado_el', models.DateTimeField(auto_now_add=True)),
                ('clave', models.IntegerField(unique=True)),
                ('valor', models.CharField(max_length=63)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agregado_el', models.DateTimeField(auto_now_add=True)),
                ('clave', models.IntegerField(unique=True)),
                ('valor', models.CharField(max_length=63)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TipoPaciente',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agregado_el', models.DateTimeField(auto_now_add=True)),
                ('clave', models.IntegerField(unique=True)),
                ('valor', models.CharField(max_length=63)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Municipio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agregado_el', models.DateTimeField(auto_now_add=True)),
                ('clave', models.IntegerField(unique=True)),
                ('clave_municipio', models.IntegerField()),
                ('abreviatura', models.CharField(max_length=2)),
                ('nombre', models.CharField(max_length=80)),
                ('geometria', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('entidad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='covid_data.Entidad')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Caso',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agregado_el', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateField(help_text='La base de datos se alimenta diariamente, esta variable permite identificar la fecha de la ultima actualizacion.')),
                ('sexo', models.IntegerField(choices=[(1, 'HOMBRE'), (2, 'MUJER'), (99, 'NO_ESPECIFICADO')], help_text='Identifica al sexo del paciente.', null=True)),
                ('fecha_ingreso', models.DateField(help_text='Identifica la fecha de ingreso del paciente a la unidad de atención.', null=True)),
                ('fecha_sintomas', models.DateField(help_text='Idenitifica la fecha en que inició la sintomatología del paciente.', null=True)),
                ('fecha_defuncion', models.DateField(help_text='Identifica la fecha en que el paciente falleció.', null=True)),
                ('intubado', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente requirió de intubación.', null=True)),
                ('neumonia', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si al paciente se le diagnosticó con neumonía.', null=True)),
                ('edad', models.IntegerField(help_text='Identifica la edad del paciente.')),
                ('nacionalidad', models.IntegerField(choices=[(1, 'MEXICANA'), (2, 'EXTRANJERA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente es mexicano o extranjero.', null=True)),
                ('embarazo', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si la paciente está embarazada.', null=True)),
                ('habla_lengua_indigena', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente habla lengua índigena.', null=True)),
                ('diabetes', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente tiene un diagnóstico de diabetes.', null=True)),
                ('epoc', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente tiene un diagnóstico de EPOC.', null=True)),
                ('asma', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente tiene un diagnóstico de asma.', null=True)),
                ('inmusupr', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente presenta inmunosupresión.', null=True)),
                ('hipertension', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente tiene un diagnóstico de hipertensión.', null=True)),
                ('otras_com', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente tiene diagnóstico de otras enfermedades.', null=True)),
                ('cardiovascular', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente tiene un diagnóstico de enfermedades cardiovasculares.', null=True)),
                ('obesidad', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente tiene diagnóstico de obesidad.', null=True)),
                ('renal_cronica', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente tiene diagnóstico de insuficiencia renal crónica.', null=True)),
                ('tabaquismo', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente tiene hábito de tabaquismo.', null=True)),
                ('otro_caso', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente tuvo contacto con algún otro caso diagnósticado con SARS CoV-2', null=True)),
                ('migrante', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente es una persona migrante.', null=True)),
                ('uci', models.IntegerField(choices=[(1, 'SI'), (2, 'NO'), (97, 'NO_APLICA'), (98, 'SE_IGNORA'), (99, 'NO_ESPECIFICADO')], help_text='Identifica si el paciente requirió ingresar a una Unidad de Cuidados Intensivos.', null=True)),
                ('entidad_nacimiento', models.ForeignKey(help_text='Identifica la entidad de nacimiento del paciente.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entidad_nacimiento', to='covid_data.Entidad')),
                ('entidad_residencia', models.ForeignKey(help_text='Identifica la entidad de residencia del paciente.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entidad_residencia', to='covid_data.Entidad')),
                ('entidad_um', models.ForeignKey(help_text='Identifica la entidad donde se ubica la unidad medica que brindó la atención.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='entidad_um', to='covid_data.Entidad')),
                ('municipio_residencia', models.ForeignKey(help_text='Identifica el municipio de residencia del paciente.', null=True, on_delete=django.db.models.deletion.PROTECT, to='covid_data.Municipio')),
                ('origen', models.ForeignKey(help_text='La vigilancia centinela se realiza a través del sistema de unidades de salud monitoras de enfermedades respiratorias (USMER). Las USMER incluyen unidades médicas del primer, segundo o tercer nivel de atención y también participan como USMER las unidades de tercer nivel que por sus características contribuyen a ampliar el panorama de información epidemiológica, entre ellas las que cuenten con especialidad de neumología, infectología o pediatría. (Categorías en Catalógo Anexo).', null=True, on_delete=django.db.models.deletion.PROTECT, to='covid_data.Origen')),
                ('pais_nacionalidad', models.ForeignKey(help_text='Identifica la nacionalidad del paciente.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pais_nacionalidad', to='covid_data.Pais')),
                ('pais_origen', models.ForeignKey(help_text='Identifica el país del que partió el paciente rumbo a México.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pais_origen', to='covid_data.Pais')),
                ('resultado', models.ForeignKey(help_text='Identifica el resultado del análisis de la muestra reportado por el  laboratorio de la Red Nacional de Laboratorios de Vigilancia Epidemiológica (INDRE, LESP y LAVE). (Catálogo de resultados diagnósticos anexo).', null=True, on_delete=django.db.models.deletion.PROTECT, to='covid_data.Resultado')),
                ('sector', models.ForeignKey(help_text='Identifica el tipo de institución del Sistema Nacional de Salud que brindó la atención.', null=True, on_delete=django.db.models.deletion.PROTECT, to='covid_data.Sector')),
                ('tipo_paciente', models.ForeignKey(help_text='Identifica el tipo de atención que recibió el paciente en la unidad. Se denomina como ambulatorio si regresó a su casa o se denomina como hospitalizado si fue ingresado a hospitalización.', null=True, on_delete=django.db.models.deletion.PROTECT, to='covid_data.TipoPaciente')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
